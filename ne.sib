'signal.sib' import
'io.sib' import
'math.sib' import
'temperament.sib' import

[
	sec =
	0;f64 SAMPLING_FREQ sec * afull
] def gen_base_array =



[
	w =
	sec =
	ef =
	sf =

	sf ef SAMPLING_FREQ sec * alin
	2;f64 __PI * SAMPLING_FREQ / aconv acumsum
	<! w amap
] def freq_shift =

[
	sec =
	ef =
	sf =

	sf ef SAMPLING_FREQ sec * alin
	2;f64 __PI * SAMPLING_FREQ / aconv acumsum
	amap_sin
] def freq_shift_sin =


[
	sec =
	sec SAMPLING_FREQ * to_u64
] def sec2index =

[
	start_sec =
	insert_array =
	base_array =

	start_sec sec2index i =

	base_array i insert_array alen agetr 
	insert_array aadd >!
	base_array
] def merge_array =

# [
	f(t)
	v(t)
	p(t)
	w
]
# [

20 f64 total_sec =
total_sec gen_base_array base_array =
base_array
A4 C4 3 f64 freq_shift_sin
0 f64 merge_array

2200 f64 2200 f64 3 f64 freq_shift_sin
3 f64 merge_array

2200 f64 200 f64 3 f64 freq_shift_sin
6 f64 merge_array

VOL_MAX 2 f64 / aconv 
'test.wav' swap write_to_wav2
]


[
	freq_array =
	freq_array
	2;f64 __PI * SAMPLING_FREQ / aconv acumsum
	amap_sin
] def make_sin_from_freq_array =


0;u64 HOLD =
1;u64 LINEAR =
[
	list =
	i =
	array =

	list left sf =
	list right left sec =
	list right right left mode =
	list right right right left ef =

# [
	'i = ' i str >< eputs
	'sf = ' sf str >< eputs
	'sec = ' sec str >< eputs
	'mode = ' mode str ><  eputs
]

	ef [] == ? [array][
		sec SAMPLING_FREQ * len =

# ['len = ' len str ><  eputs]

		array i len agetr sub_array =

		mode HOLD == ? [
			sub_array
			sf len afull
			aadd >!
		][
			mode LINEAR == ? [
				sub_array
				sf ef len alin
				aadd >!
				][] exec
		] exec

		array i len + list right right right self
	] exec
] 
def make_line_sub =

[
	list =
	list right left len =
	len [] == ? [0;u64][
		len 
		list right right right self
		+
	] exec
] def make_line_total_len =

[
	BPS =
	list =
	list right left len =
	<! len [] == ? [][
		list right
		4;f64
		len / BPS / setl
		list right right right BPS self
	] exec
] def make_line_to_number_sub =

[
	BPS =
	list =
	list BPS make_line_to_number_sub
	list
# __STACK
] def make_line_to_number =

[
	BPM =
	list =
	BPM 60;f64 / BPS =
	list BPS make_line_to_number list =
	list
	0;f64
	list make_line_total_len SAMPLING_FREQ *
# __STACK
	afull array =
	array 0;u64 list make_line_sub
] def make_line = 


60;f64 BPM =

# [Do not use 0 because inf occurs ]
# [
[
	C4 4 HOLD C4 8 LINEAR
	D4 4 HOLD D4 8 LINEAR
	E4 4 HOLD E4 8 LINEAR
	F4 4 HOLD F4 8 LINEAR
	G4 4 HOLD G4 8 LINEAR
	A4 4 HOLD A4 8 LINEAR
	B4 4 HOLD B4 8 LINEAR
	C5 4 HOLD C5 8 LINEAR
	C5 1000 HOLD
] BPM make_line

make_sin_from_freq_array
VOL_MAX 2;f64 / aconv 
'test.wav' swap write_to_wav2
]


# [

[
	sec =
	end =
	start =

	start end SAMPLING_FREQ sec * alin

] def line_shift =

10 f64 sec = 

sec gen_time t =

300 f64 1200 f64 sec line_shift f =
f 2 f64 __PI * aconv SAMPLING_INTERVAL aconv acumsum
<! c_sin amap __I16_MAX aconv

1200 f64 1200 f64 sec line_shift f =
f 2 f64 __PI * aconv SAMPLING_INTERVAL aconv acumsum
<! c_sin amap __I16_MAX aconv

><

'test.wav' swap write_to_wav2


]
