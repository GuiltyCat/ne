'signal.sib' import
'io.sib' import
'math.sib' import
'temperament.sib' import

[
	sec =
	0 f64 SAMPLING_FREQ sec * afull
] def gen_base_array =


[
	w =
	sec =
	ef =
	sf =

	sf ef SAMPLING_FREQ sec * alin
	2 f64 __PI * SAMPLING_FREQ / aconv acumsum
	<! w amap
] def freq_shift =

[
	sec =
	ef =
	sf =

	sf ef SAMPLING_FREQ sec * alin
	2 f64 __PI * SAMPLING_FREQ / aconv acumsum
	amap_sin
] def freq_shift_sin =


[
	sec =
	sec SAMPLING_FREQ * to_u64
] def sec2index =

[
	start_sec =
	insert_array =
	base_array =

	start_sec sec2index i =

	base_array i insert_array alen agetr 
	insert_array aadd >!
	base_array
] def merge_array =

# [
	f(t)
	v(t)
	p(t)
	w
]

20 f64 total_sec =
total_sec gen_base_array base_array =
base_array
A4 C4 3 f64 freq_shift_sin
0 f64 merge_array

2200 f64 2200 f64 3 f64 freq_shift_sin
3 f64 merge_array

2200 f64 200 f64 3 f64 freq_shift_sin
6 f64 merge_array

VOL_MAX 2 f64 / aconv 
'test.wav' swap write_to_wav2


[
	list =
	i =
	array =

	list left sf =
	list right left sec =
	list right right left ef =

	ef [] == ? [array][
		sec SAMPLING_FREQ * len =
		array i len agetr
		sf ef sec SAMPLING_FREQ * alin
		aadd >!
		array i len + list right right self
	] exec
] def make_line_sub =

[
	list =
	list right left len =
	len [] == ? [0 u64][
		len
		list right right self
		+
	] exec
] def make_line_total_len =

[
	list =
	0 f64
	list make_line_total_len SAMPLING_FREQ *
	afull array =
	array 0 u64 list make_line_sub
] def make_line = 

[
	400 f64 0.001 f64
	500 f64 0.001 f64
	400 f64 0.001 f64
	400 f64 0.001 f64
	500 f64 0.001 f64
	400 f64 0.001 f64
	500 f64 0 f64
] make_line
print_array
__STACK



# [

[
	sec =
	end =
	start =

	start end SAMPLING_FREQ sec * alin

] def line_shift =

10 f64 sec = 

sec gen_time t =

300 f64 1200 f64 sec line_shift f =
f 2 f64 __PI * aconv SAMPLING_INTERVAL aconv acumsum
<! c_sin amap __I16_MAX aconv

1200 f64 1200 f64 sec line_shift f =
f 2 f64 __PI * aconv SAMPLING_INTERVAL aconv acumsum
<! c_sin amap __I16_MAX aconv

><

'test.wav' swap write_to_wav2


]
