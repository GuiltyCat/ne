'signal.sib' import
'io.sib' import
'array.sib' import
'ne.sib' import

# [ max vol is 1. A D R take sec, S takes between 0 to 1 ]
[
	R = S = D = A = len =

	S len afull array =
	A SAMPLING_FREQ * A_i =
	D SAMPLING_FREQ * D_i =
	R SAMPLING_FREQ * R_i =
# [

	'len = ' len str >< eputs
	'A_i = ' A_i str >< eputs
	'D_i = ' D_i str >< eputs
	'S = ' S str >< eputs
	'R_i = ' R_i str >< eputs
]


	R_i len > ? ['failed: R_i len >' eputs][
		array 0;u64 A_i len min agetr 0;f64 aconv 0;f64 1;f64 A_i alin aadd >!

		A_i D_i + len > ? [] [
			array A_i D_i agetr 0;f64 aconv
			1;f64 S D_i alin aadd >!
		] exec
		array len R_i - aget num =
		array len R_i - R_i agetr 0;f64 aconv 
		num 0;f64 R_i alin aadd >!
	] exec
	array
] def envelope_generator_ADSR =

[
	R = F = S = D = H = A = array =
] def envelope_generator_AHDSFR =



[
	ADSR =
	freqsec2wave =
	sec =
	freq =

	ADSR expand_list R = S = D = A =

# [

	'freq = ' freq str >< eputs
	'sec = ' sec str >< eputs

	'A = ' A str >< eputs
	'D = ' D str >< eputs
	'S = ' S str >< eputs
	'R = ' R str >< eputs
]

	freq sec R + freqsec2wave array =
	array alen A D S R envelope_generator_ADSR array2 =
	array array2 ahprod
] def make_synthesize_array =


[
	sec = 
	freq =

	freq sec SAMPLING_FREQ * afull make_sin_from_freq_array
] def make_sin =

[
	ADSR =

	list =
	i =
	array =

	list left sf =
	list right left sec =
	list right right left mode =
	list right right right left ef =

	ef [] == ? [array][
		sf sec <! make_sin ADSR make_synthesize_array sub_array =
		array i sub_array alen agetr sub_array aadd >!
		sec SAMPLING_FREQ * next_len =
		array i next_len + list right right right ADSR self
	] exec

] def make_synthesize_sin_sub =

[
	ADSR =
	BPM  =
	list =

	ADSR right right right left R = 

	BPM 60;f64 / BPS =

	list BPS make_line_to_number list =

	0;f64 list make_line_total_len R + SAMPLING_FREQ  * afull array =

	array 0;u64 list ADSR make_synthesize_sin_sub
] def make_synthesize_sin =

120;f64 BPM =
# [

[
	F#5 4 HOLD
	E5  4 HOLD
	D5  4 HOLD
	C5  4 HOLD
] 
BPM 
[0.1 f64 0.1 f64 0.5 f64 0.3 f64] make_synthesize_sin
VOL_MAX 2 f64 / aconv 
'test.wav' swap write_to_wav2
]


[
	times =
	list =

	list [] == ? [][
		list
		list left !> times * setl 
		right right right times self
	] exec
] def shift_freq_sub =

[
	times =
	list =
	list times shift_freq_sub
	list
] def shift_freq =

# [
[

	F#5 4. HOLD
	E5  4. HOLD
	D5  4. HOLD
	C5  4. HOLD
	B4  4. HOLD
	C5  4. HOLD
] list =
list exec_list 
__STACK >!
list 0.5;f64 shift_freq
__STACK
[

	F#5 4 HOLD
	E5  4 HOLD
	D5  4 HOLD
	C5  4 HOLD
	B4  4 HOLD
	C5  4 HOLD
] 0.5 f64 shift_freq
__STACK
]

# [
[ 
	1 f64 2 3
	3 f64 2 3
	4 f64 2 3
] 0.5 f64 shift_freq
__STACK
]
# [
print_array
44100 u64 0.1 f64 0.1 f64 0.5 f64 0.3 f64 envelope_generator_ADSR
print_array
]
