std.sib import
io.sib import
math.sib import
wav.sib import
limits.sib import
array.sib import
filter.sib import

# [ t f p v ]
0 i64 COUNT =


[
	w =
	f =
	s =
	l =
	v =
	p =

]
def Wave =

[
	A =
	D =
	S =
	R =
]
def ADSR =

# [ format is [f s l v p w] ]

[ right left ] def get_s =
[ right right left ] def get_l =
[
	fslvpw =
	fslvpw left [] == ? [0 f64] [
		fslvpw left get_s
		fslvpw left get_l
		+
		fslvpw right self max
	] exec
] def total_length =
# [
[
	[ 0 f64 0 f64 10 f64 0 f64 0 f64 0 f64 ]
	[ 0 f64 10 f64 20 f64 0 f64 0 f64 0 f64 ]
]
total_length
__STACK
]

0 f64 10 f64 range f64a dst =
10 f64 15 f64 range f64a short =

dst short 1 u64 aplus
# __STACK


440 f64 f =
0.05 f64   l =
0.5 f64 v =
0 f64   p =
f l v p wave_c_sin_array

1000 f64 f =
0.05 f64   l =
0.5 f64 v =
0 f64   p =
f l v p wave_c_sin_array

0 u64 aplus

test_wave =



# test_wave 

test_wave

600 f64 cut_freq =
300 i64 num =

cut_freq num SAMPLING_FREQ lowpass_filter 
num hanning
ahprod

aconv 



print_array
# __STACK


# __STACK
